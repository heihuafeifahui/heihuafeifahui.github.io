<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>禅道使用笔记</title>
    <link href="undefined2019/12/02/%E7%A6%85%E9%81%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>2019/12/02/%E7%A6%85%E9%81%93%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="禅道使用笔记"><a href="#禅道使用笔记" class="headerlink" title="禅道使用笔记"></a>禅道使用笔记</h1><h2 id="原版下载"><a href="#原版下载" class="headerlink" title="原版下载"></a>原版下载</h2><ul><li><p>禅道开源版：<a href="http://www.qfdmy.com/wp-content/themes/quanbaike/go.php?url=aHR0cDovL2RsLmNuZXpzb2Z0LmNvbS96ZW50YW8vZG9ja2VyL2RvY2tlcl96ZW50YW8uemlw" target="_blank" rel="noopener">http://dl.cnezsoft.com/zentao/docker/docker_zentao.zip</a></p></li><li><p>数据库配置（可以设置</p></li></ul><p>  MYSQL_ROOT_PASSWORD</p><p>  变量来更改密码）：</p><ul><li><strong>账号：</strong> root</li><li><strong>密码：</strong> 123456</li></ul><ul><li><p>可挂载目录</p><ul><li><strong>/app/zentaopms:</strong> 该目录为禅道目录，里面包含禅道代码及附件上传目录</li><li><strong>/var/lib/mysql:</strong> 该目录为数据库的数据目录</li></ul></li></ul><h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><p>解压 <code>docker_zentao.zip</code> 后修改目录名为 <code>build</code>，增加 <code>docker-compose.yml</code> 配置如下</p><pre><code>version: &#39;3.1&#39;services:  zendao:    build: build    restart: always    container_name: zendao    environment:      MYSQL_ROOT_PASSWORD: 123456    ports:      - 80:80    volumes:      - ./app:/app/zentaopms      - ./data:/var/lib/mysql</code></pre><pre><code># 构建镜像docker-compose build# 启动容器docker-compose up -d</code></pre><pre><code># 构建镜像docker-compose build# 启动容器docker-compose up -d</code></pre><h2 id="访问禅道"><a href="#访问禅道" class="headerlink" title="访问禅道"></a>访问禅道</h2><p><img src="https://i.loli.net/2019/12/02/SQZHiKpPCsBdN8k.png" srcset="/img/loading.gif" alt=""></p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li><strong>创建用户</strong></li></ol><p><img src="https://i.loli.net/2019/12/02/UxKYqv6MRlsnIfX.png" srcset="/img/loading.gif" alt=""></p><ol start="2"><li><strong>添加产品</strong></li></ol><p><img src="https://i.loli.net/2019/12/02/pSB7ePvc5CwGbkr.png" srcset="/img/loading.gif" alt=""></p><ol start="3"><li><p><strong>为产品添加需求</strong></p><p><img src="https://i.loli.net/2019/12/02/6FgCcPI9LNeMx2E.png" srcset="/img/loading.gif" alt=""></p></li></ol><p><strong>批量创建需求</strong></p><p><img src="https://i.loli.net/2019/12/02/fGsOP7khLNYHuRw.png" srcset="/img/loading.gif" alt=""></p><p><strong>批量编辑需求</strong></p><p><img src="https://i.loli.net/2019/12/02/CABURdvo5cVxqk4.png" srcset="/img/loading.gif" alt=""></p><ol start="4"><li><p><strong>创建项目</strong></p><p><img src="https://i.loli.net/2019/12/02/iR5NTbrpJlnCvZh.png" srcset="/img/loading.gif" alt=""></p></li><li><p><strong>设置团队</strong></p><p><img src="https://i.loli.net/2019/12/02/4eWaMudnCYAmNov.png" srcset="/img/loading.gif" alt=""></p></li></ol><p><strong>点击团队管理</strong></p><p><img src="https://i.loli.net/2019/12/02/MEAPdQkJ64BZC9D.png" srcset="/img/loading.gif" alt=""></p><p><strong>创建完成</strong></p><p><img src="https://i.loli.net/2019/12/02/R2CB3hxsEidaJMe.png" srcset="/img/loading.gif" alt=""></p><ol start="6"><li><p><strong>关联需求</strong></p><p>在项目-需求页面关联需求</p><p><img src="https://i.loli.net/2019/12/02/q2X7YFMQiALdTVR.png" srcset="/img/loading.gif" alt=""></p></li><li><p>项目拆解</p></li></ol><p>需求关联好了以后，项目经理会召开需求分解会议，将需求分解成可执行任务，并评估工作量，最后指派给开发人员，以登录为例，要分解成数据库设计，前端开发，后端开发三个步骤才能完成</p><p>在项目-需求网页中，点击批量分解</p><p><img src="https://i.loli.net/2019/12/02/pctEuQsWzSrmRi8.png" srcset="/img/loading.gif" alt=""></p><p>在</p><ol start="8"><li>指派任务和工时记录</li></ol><p>在项目-任务网页</p><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202110432712.png" srcset="/img/loading.gif" alt="image-20191202110432712"></p><ol start="9"><li>查看项目概况</li></ol><p><img src="https://i.loli.net/2019/12/02/vgatscLHlNb3oj4.png" srcset="/img/loading.gif" alt=""></p><ol start="10"><li><p>开发人员使用</p><p>在我的地盘中查看被派发的任务</p><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202110934981.png" srcset="/img/loading.gif" alt="image-20191202110934981"></p><p>点击开始，开始开发任务，任务状态变为进行中</p><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202111028130.png" srcset="/img/loading.gif" alt="image-20191202111028130"></p></li></ol><p>根据任务完成度修改工时</p><p><img src="https://i.loli.net/2019/12/02/461DQCZdXSbfsLK.png" srcset="/img/loading.gif" alt=""></p><p>点击完成，填写工时，通过工时，我们可以知道之前的评估是否准确，并能在下一次进行相应的调整</p><p><img src="https://i.loli.net/2019/12/02/xboFUE2KdmWMzBV.png" srcset="/img/loading.gif" alt=""></p><p>在项目-版本-版本中 创建版本</p><p><img src="https://i.loli.net/2019/12/02/Gd8O7ETpSc1qiKt.png" srcset="/img/loading.gif" alt=""></p><p>根据完成的版本关联需求，用于告知测试人员完成了哪些功能</p><p><img src="https://i.loli.net/2019/12/02/jwhaPrQzf1RIJby.png" srcset="/img/loading.gif" alt=""></p><p>关联需求后，在项目-版本-版本中</p><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202135921629.png" srcset="/img/loading.gif" alt="image-20191202135921629"></p><p>提交测试</p><p><img src="https://i.loli.net/2019/12/02/DGu7itVYj1vxhCd.png" srcset="/img/loading.gif" alt=""></p><ol start="11"><li>项目测试</li></ol><p>测试人员可以在测试-测试单中看到开发人员提交的测试</p><p><img src="https://i.loli.net/2019/12/02/68wCxJA1koKGhUf.png" srcset="/img/loading.gif" alt=""></p><p>测试人员新建用例</p><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202140230330.png" srcset="/img/loading.gif" alt="image-20191202140230330"></p><p>在测试-测试单中使提交的测试功能与测试用例关联</p><p>然后将用例分配给指定测试人员</p><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191202140849240.png" srcset="/img/loading.gif" alt="image-20191202140849240"></p><p>测试人员返回测试结果</p><p><img src="https://i.loli.net/2019/12/02/FNqkjahpo8El1Tc.png" srcset="/img/loading.gif" alt=""></p><p>如果测试未通过，则点击转bug按钮，填写bug的原因和详细步骤</p><p><img src="https://i.loli.net/2019/12/02/83qK6DChaxt7eyH.png" srcset="/img/loading.gif" alt=""></p><p>点击确认，bug就会指派给开发人员</p><ol start="12"><li>修复bug</li></ol><p>开发人员能在我的地盘-bug里面找到指派给自己的bug</p><p>点击确认接收bug，修复完成后点击解决</p><p>13.产品发布</p><p>测试完成后，进入产品-发布，创建发布</p><p>然后在创建的发布中关联当前版本的需求与bug</p><p><img src="https://i.loli.net/2019/12/02/wPrp6oistckeAVR.png" srcset="/img/loading.gif" alt=""></p><p>在路线图中看产品迭代</p><p><img src="https://i.loli.net/2019/12/02/jLiByrq7AKceGHl.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WZRY笔记</title>
    <link href="undefined2019/11/21/wzry/"/>
    <url>2019/11/21/wzry/</url>
    
    <content type="html"><![CDATA[<h1 id="WZRY"><a href="#WZRY" class="headerlink" title="WZRY"></a>WZRY</h1><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ul><li>创建vue客户端</li></ul><pre><code class="vue">vue create adminvue create web</code></pre><ul><li>创建服务端</li></ul><pre><code>mkdir servernpm init -y</code></pre><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><ul><li>修改package.json，添加启动方式,</li></ul><pre><code>{  &quot;name&quot;: &quot;server&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: {    &quot;server&quot;: &quot;nodemon index.js&quot;,    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;  },  &quot;keywords&quot;: [],  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;}</code></pre><ul><li>运行时使用</li></ul><pre><code>npm run server</code></pre>]]></content>
    
    
    <categories>
      
      <category>node</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CMMI访谈笔记</title>
    <link href="undefined2019/10/10/CMMI%E8%AE%BF%E8%B0%88%E7%AC%94%E8%AE%B0/"/>
    <url>2019/10/10/CMMI%E8%AE%BF%E8%B0%88%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CMMI-访谈笔记"><a href="#CMMI-访谈笔记" class="headerlink" title="CMMI 访谈笔记"></a>CMMI 访谈笔记</h1><h2 id="TS（设计开发人员）-问题"><a href="#TS（设计开发人员）-问题" class="headerlink" title="TS（设计开发人员） 问题"></a>TS（设计开发人员） 问题</h2><table><thead><tr><th>目标</th><th>实践</th><th>问题翻译</th><th>回答要点</th></tr></thead><tbody><tr><td>SG1：选择产品组件解决方案：从备选方案中，选择产品或产品组件解决方案。     （Select Product-Component Solutions: Product or product-component solutions  are selected from alternative solutions.）</td><td>SP1.1: 开发详细的备选解决方案及评选准则：开发详细的备选解决方案及评选准则。     (Develop Detailed Alternative Solutions and  Selection Criteria: Develop detailed alternative solutions and selection  criteria. )</td><td>是否为技术架构识别了候选方案及候选准则？     如何决定哪些技术或者方案是最合适的？</td><td>1. 候选方案如：数据库，编码语言等     候选准则如：易用性，熟悉程度，公司战略，客户要求等     2. 通过项目组头脑风暴对候选方案进行打分</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.2 选择产品组件解决方案：选择最能满足所建立准则的产品组件解决方案。     (Select Product-Component Solutions: Select the product-component solutions  that best satisfy the criteria established. )</td><td>如何选择最好的候选方案？     是否使用了哪些选择标准？     对于技术方案的选择，公司是否使用哪些规定？</td><td>1. 明确问题，准备选择标准，准备候选方案，讨论并确定候选方案     2. 候选准则如：易用性，熟悉程度，公司战略，客户要求等     3. 符合公司战略方向，符合客户要求等</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG2：开发设计：开发产品或产品组件的设计。     (Develop the Design: Product or product-component designs are  developed. )</td><td>SP2.1:  设计产品或产品组件：开发产品或产品组件的设计。     (Design the Product or Product Component: Develop a design for the product  or product component. )</td><td>如何确保详细设计满足定义的需求？     在数据库设计方面使用了哪些技术或者工具？</td><td>1. 评审、需求跟踪矩阵等方式     2. powerdesigner、rose等，sqlserver、oracle等</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.2 建立技术数据包：建立并维护技术数据包。     (Establish a Technical Data Package: Establish and maintain a technical  data package. )</td><td>如何决定设计已完成，可以开始编码工作？</td><td>1. 通过需求跟踪矩阵、评审</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.3 利用准则设计接口：按照已建立并维护的准则，设计详细的产品组件接口面。     (Design Interfaces Using Criteria: Design comprehensive product-component  interfaces in terms of established and maintained criteria. )</td><td>如何设计接口？     包含哪些接口类型？     在哪定义接口的需求？</td><td>1. 识别接口、设计输入参数、设计输出参数等     2. 在产品需求说明书、详细设计说明书</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.4  进行自己开发、购买或重用分析：根据已建立的的准则，评估产品组件是要开发、购买还是重用。     (Perform Make, Buy, or Reuse Analyses: Evaluate whether the product  components should be developed, purchased, or reused based on established  criteria. )</td><td>在哪定义哪些组件可以重用？     是否建立了组件重用的准则？</td><td>1. 在概要设计、需求跟踪矩阵中定义     2. 历史项目、公用模块等</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG3：实现产品设计：依照设计，实现产品组件以及相关的辅助文档。     （Implement the Product Design: Product components, and associated support  documentation, are implemented from their designs. ）</td><td>SP3.1:  实现设计：实现产品组件设计。     (Implement the Design: Implement the designs of the product components.  )</td><td>编码阶段的参考文档主要有哪些？     如何确保编码的准确？     公司是否定义了编码标准？是否被遵循？</td><td>1. 需求、设计、编码标准等     2. 代码评审、单元测试     3. Java、C#等编码标准     4. 工作产品（代码、数据库、编译后的文件等）的标准后缀名</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP3.2 建立产品支持文档：建立并维护产品最终使用文档。     (Develop Product Support Documentation: Develop and maintain the end-use  documentation.)</td><td>是否编写用户手册，安装手册？     由谁编写？</td><td>是</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="PI（设计人员）"><a href="#PI（设计人员）" class="headerlink" title="PI（设计人员）"></a>PI（设计人员）</h2><table><thead><tr><th>目标</th><th>实践</th><th>问题翻译</th><th>回答要点</th></tr></thead><tbody><tr><td>SG1：为产品集成作准备：实施产品集成的准备工作。     （Prepare for Product Integration:   Preparation for product integration is conducted. ）</td><td>SP1.1:  确定集成顺序：确定产品组件的集成顺序。     (Determine Integration Sequence: Determine the product-component  integration sequence.)</td><td>你的项目是否识别了可替代的集成顺序？     是如何选择最合适的集成顺序的？</td><td>1. 根据系统架构关系、业务关系     2. 先根据架构关系、再根据模块业务关系</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.2 建立产品集成环境：建立并维护支持产品组件集成所需的环境。     (Establish the Product Integration Environment: Establish and maintain the  environment needed to support the integration of the product components. )</td><td>你的项目需要哪些软、硬件集成环境？</td><td>1.  硬件环境（服务器、客户端等配置）     2. 软件环境（数据库、服务等）</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.3 建立产品集成过程及准则：建立并维护产品组件集成的过程及准则。     (Establish Product Integration Procedures and Criteria: Establish and  maintain procedures and criteria for integration of the product  components.)</td><td>你建立了哪些集成标准？</td><td>1. 准入条件（单元测试通过）     2. 集成测试用例     3. 集成退出准则</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG2：确保界面相容性：产品组件的内部与外部界面都是相容的。     (Ensure Interface Compatibility: The  product-component interfaces, both internal and external, are  compatible. )</td><td>SP2.1:  评审接口说明的完整性：评审接口说明的范围与完整性。     (Review Interface Descriptions for Completeness: Review interface  descriptions for coverage and completeness. )</td><td>如何确保接口的参数与模块定义的接口一致？     如何确保接口的正确性和完整性？</td><td>1. 接口一致性审查     2. 通过集成测试用例进行测试</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.2 管理界面：管理产品与产品组件的内部与外部接口的定义、设计及变更。     (Manage Interfaces: Manage internal and external interface definitions,  designs, and changes for products and product components. )</td><td>设计评审是否发现了问题？如何改正的？     有没有通过模拟/原型模型得到改进的内容？     如何管理这些改进内容？</td><td>1.  有，通过记录评审问题，跟踪评审的改进结果（可举例说明）     2. 有，如识别到原来没有意识到的需求等     3. 通过评审缺陷记录进行跟踪、维护</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG3：组合产品组件并交付产品：组合已验证的产品组件，并交付已集成、已验证及以确认的产品。     （Assemble Product Components and Deliver the Product: Verified product  components are assembled and the integrated, verified, and validated product  is delivered.）</td><td>SP3.1:  确认欲集成的产品组件已准备就绪：在产品组合前，确认欲组合成产品的产品组件已被适当地识别、依据其说明运作、以及确定产品组件接口符合接口说明。     (Confirm Readiness of Product Components for Integration: Confirm, prior to  assembly, that each product component required to assemble the product has  been properly identified, f</td><td>如何确保集成前所有模块是无缺陷的？     Bug是不是在集成前都已解决？</td><td>1. 单元测试、代码走查     2. 须全部解决才能开始测试/没有严重的Bug存在</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP3.2 组合产品组件：按照产品集成顺序及现有的过程，组合产品组件。     (Assemble Product Components: Assemble product components according to the  product integration sequence and available procedures. )</td><td>谁负责系统集成？     有没有集成计划？     集成的模块在哪存档？</td><td>1. 项目经理/技术经理     2. 有     3. 在配置库中</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP3.3 评估已组合的产品组件：评估已组合的产品组件的接口相容性。     (Evaluate Assembled Product Components: Evaluate assembled product  components for interface compatibility.)</td><td>谁执行集成测试？     测试缺陷记录在哪并且是如何跟踪的？</td><td>1. 测试人员/开发人员     2. 记录在缺陷管理工具中，通过缺陷分配、每周跟踪</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP3.4 包装并交付产品或产品组件：包装已组合的产品或产品组件，并交付给适当的客户。     (Package and Deliver the Product or Product Component: Package the  assembled product or product component and deliver it to the appropriate  customer. )</td><td>如何向客户发布系统？</td><td>1.  测试通过，打包，验证，发布（验证软硬件环境，配置系统安装环境，安装系统）</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="VER（测试人员）"><a href="#VER（测试人员）" class="headerlink" title="VER（测试人员）"></a>VER（测试人员）</h2><table><thead><tr><th>目标</th><th>实践</th><th>问题翻译</th><th>回答要点</th></tr></thead><tbody><tr><td>SG1：验证之准备：进行验证准备。     （Prepare for Verification:   Preparation for verification is conducted.）</td><td>SP1.1:  选择需验证之工作产品：选择需验证之工作产品及对每一工作产品使用的验证方法。     (Select Work Products for Verification: Select the work products to be  verified and the verification methods that will be used for each. )</td><td>你的项目使用了哪些评审和测试类型？</td><td>1. 非正式评审     2. 正式评审     3. 单元测试     4. 代码走查     5. 集成测试     6. 系统测试（试运行、验收测试）</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.2 建立验证环境：建立并维护支持验证活动的环境。     (Establish the Verification Environment: Establish and maintain the  environment needed to support verification. )</td><td>如何识别评审和测试需要的技能？     使用什么工具进行评审和测试？</td><td>1. 依据公司定义的角色职责     2. 依据评审的工作产品的性质（业务、技术等）     3. 评审：工作产品检查单，测试：测试工具（loadrunner等）</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.3 建立验证过程和准则：建立并维护所选定的工作产品的验证过程和准则。     (Establish Verification Procedures and Criteria: Establish and maintain  verification procedures and criteria for the selected work products.)</td><td>评审和测试都定义了哪些准则？     如何确定何时该停止评审和测试？</td><td>1.  评审：评审检查单，测试：测试用例的预期结果     2. 通过评审检查单，达到测试用例的预期结果</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG2：进行同行评审：对所选定的工作产品进行同行评审。     (Perform Peer Reviews: Peer reviews  are performed on selected work products. )</td><td>SP2.1:  准备同行评审：准备对所选定的工作产品进行同行评审。     (Prepare for Peer Reviews: Prepare for peer reviews of selected work  products. )</td><td>在哪计划评审活动？     是否准备了评审检查单？</td><td>1.  依据公司规定的评审要求，项目组的工作产品规模和重要程度（项目计划中的评审计划）     2. 重要的工作产品有检查单（如需求、设计等）</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.2  进行同行评审：针对所选定的工作产品进行同行评审，并识别同行评审中出现的问题。     (Conduct Peer Reviews: Conduct peer reviews on selected work products and  identify issues resulting from the peer review. )</td><td>你的项目执行哪些类型的评审？     在哪记录评审发现的问题？     如何确保问题得到解决？</td><td>1.  非正式评审，正式评审，代码走查     2. 评审记录表中     3. 由技术经理定期跟踪缺陷是否按期解决，QA也会进行审计，配置管理员在基线时也会检查</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.3 分析同行评审资料：分析同行评审的准备、执行及结果资料。     (Analyze Peer Review Data: Analyze data about preparation, conduct, and  results of the peer reviews.)</td><td>如何分析评审发现的问题？     根据分析的结果采取什么行动？</td><td>1. 严重等级、缺陷密度等     2. 决定是否需要重评审</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG3：验证工作产品：按照指定的需求验证所选定的工作产品。     （Verify Selected Work Products: Selected work products are verified against  their specified requirements. ）</td><td>SP3.1: 进行验证:  对所选定的工作产品进行验证。     (Perform Verification: Perform verification on the selected work products.  )</td><td>在哪记录测试结果？      对缺陷如何处理？</td><td>1. 缺陷跟踪工具（如TD等）     2. 分配缺陷解决人，解决后，测试人员重新验证</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP3.2 分析验证结果并确定纠正措施：分析所有验证活动的结果，并确定纠正措施。     (Analyze Verification Results and Identify Corrective Action: Analyze the  results of all verification activities and identify corrective action.)</td><td>对缺陷数据进行哪些分析？     根据分析的结果采取什么行动？</td><td>1.  严重等级、缺陷密度、发现/解决趋势、技术类型等     2. 决定哪些模块需要加大测试力度</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="VALVER-测试人员"><a href="#VALVER-测试人员" class="headerlink" title="VALVER(测试人员)"></a>VALVER(测试人员)</h2><table><thead><tr><th>目标</th><th>实践</th><th>问题翻译</th><th>回答要点</th></tr></thead><tbody><tr><td>SG1：确认准备：进行确认准备     （Prepare for Validation: Preparation for validation is conducted.）</td><td>SP1.1:  选择确认之产品：选择需确认的产品及产品组件，及对每一个产品及产品组件使用的确认方法。     (Select Products for Validation: Select products and product components to  be validated and the validation methods that will be used for each. )</td><td>使用哪些测试类型对系统进行测试？     如何确认产品的性能？</td><td>1. 单元测试、集成测试、系统测试、试运行测试、验收测试等     2. 网络速度、响应速度、容量、压力等</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.2 建立确认环境：建立并维护支持确认活动所需的环境。     (Establish the Validation Environment: Establish and maintain the  environment needed to support validation.   )</td><td>如何识别测试环境的软硬件需求？     使用了哪些测试工具或者软件？     如何跟踪测试发现的缺陷？</td><td>1. 依据项目计划中的环境需求以及客户的运行环境要求，结合公司的标准工作环境配置     2. 测试软件（Nunit，LoadRunner等），测试管理工具（TD、BugFree等）     3. 通过缺陷管理工具进行跟踪（描述测试缺陷管理过程）</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP1.3 建立确认过程和准则：建立并维护确认过程和准则。     (Establish Validation Procedures and Criteria: Establish and maintain  procedures and criteria for validation.   )</td><td>系统定义了哪些测试标准？     是否有编写测试用例？</td><td>1. 测试用例的通过率，缺陷解决率、遗留率，缺陷解决周期等     2. 描述测试用例包含要素（输入、步骤、预期结果、实际结果等）</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SG2：确认产品或产品组件：确认产品或产品组件，以确保在预期工作环境下可适用。     (Validate Product or Product Components:   The product or product components are validated to ensure that they  are suitable for use in their intended operating environment. )</td><td>SP2.1:  进行确认：对选定的产品及产品组件进行确认。     (Perform Validation: Perform validation on the selected products and  product components. )</td><td>客户是否提供接收标准？     使用什么环境进行确认？     如何跟踪系统、单元、集成测试的缺陷？     系统测试主要有哪些人参与？</td><td>1. 描述客户的验收标准     2. 模拟环境、客户试运行的实际环境     3. 描述测试缺陷管理过程     4. 开发人员、项目经理、测试人员等</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SP2.2 分析确认结果：分析确认活动的结果，并识别问题。     (Analyze Validation Results: Analyze the results of the validation  activities and identify issues. )</td><td>对系统测试结果进行哪些分析？     对分析结果采取哪些行动？     在哪存储系统测试的缺陷？</td><td>1. 缺陷模块分布、缺陷解决周期、缺陷严重等级、缺陷类型（界面、逻辑、数据）分析     2. 对缺陷密度大的部分，加强测试力度</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>CMMI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA插件ESLint</title>
    <link href="undefined2019/10/02/IDEA%E6%8F%92%E4%BB%B6ESLint/"/>
    <url>2019/10/02/IDEA%E6%8F%92%E4%BB%B6ESLint/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA-插件ESLint"><a href="#IDEA-插件ESLint" class="headerlink" title="IDEA 插件ESLint"></a>IDEA 插件ESLint</h1><p>先使用自动配置试一下<br><img src="https://i.loli.net/2019/11/13/k8HYwFNioEtgCOD.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA插件SaveActions</title>
    <link href="undefined2019/10/02/IDEA%E6%8F%92%E4%BB%B6SaveActions/"/>
    <url>2019/10/02/IDEA%E6%8F%92%E4%BB%B6SaveActions/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA-插件SaveAtions配置"><a href="#IDEA-插件SaveAtions配置" class="headerlink" title="IDEA 插件SaveAtions配置"></a>IDEA 插件SaveAtions配置</h1><h2 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h2><p><img src="C:%5CUsers%5CAllen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191113101114291.png" srcset="/img/loading.gif" alt="image-20191113101114291"></p><ol><li><p>activate save actions on save （before saving each file performs the configured action below）</p><p> 在保存每个文件之前，执行下面配置的操作 </p></li><li><p>Activate save actions on shortcut  </p><p> 激活保存操作的快捷方式 </p></li><li><p>no action if compile errors</p><p> 如果编译错误，则不执行操作</p></li><li><p>optimize imports</p><p> 最佳化导入 </p></li><li><h5 id="reformat-file"><a href="#reformat-file" class="headerlink" title="reformat file"></a>reformat file</h5><p> 重新格式化文件</p></li><li><p>reformat only changed code</p><p> 仅对更改的代码进行格式化</p></li><li><p>remove unnecessary semicolon</p><p> 删除不必要的分号</p></li></ol><h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><p><img src="https://i.loli.net/2019/11/13/gaZbPcX458SH1ou.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker笔记</title>
    <link href="undefined2018/10/10/docker/"/>
    <url>2018/10/10/docker/</url>
    
    <content type="html"><![CDATA[<p>docker安装脚本<br><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p><p>{<br>  “registry-mirrors”: [<br>    “<a href="https://registry.docker-cn.com&quot;" target="_blank" rel="noopener">https://registry.docker-cn.com&quot;</a><br>  ]<br>}</p><p>docker进入ubuntu,运行bash</p><p><code>docker run -it --rm \  ubuntu:16.04 \  bash</code></p><p>  -it i是交互式操作 t的终端<br>  –rm 容器推出后随之将其删除1</p><p>  docker ps 查看正在运行的容器</p><p>进入docker容器<br>创建一个容器<br>$ sudo docker run -itd ubuntu:14.04 /bin/bash  </p><p>　　然后我们使用docker ps查看到该容器信息，接下来就使用docker attach进入该容器</p><p>$ sudo docker attach 44fc0f0582d9  </p><p>进入tomcat</p><p><code>docker run -it tomcat -p 8080:8080</code></p><p>与tomcat交互</p><p><code>docker run -it tomcat -bash</code></p><p>bash进入容器<br>docker exec -it 1a8735df5e76 bash</p><p>构建sbdl镜像 .表示当前目录<br><code>docker build -t sbdl .</code> </p><p><img src="https://ws1.sinaimg.cn/large/007jVdWKgy1g6prvr3valj30ss052dfw.jpg" srcset="/img/loading.gif" alt=""></p><p>删除所有的虚悬镜像</p><p>docker image prune</p><p>删除所有停止的容器</p><p>docker container prune </p><p>数据卷持久化</p><p><code>docker run -p 80:8080 --name tomcat1 -d -v /usr/local/docker/tomcat/ROOT:/usr/local/tomcat/webapps/ROOT tomcat</code></p><p>mysql5.7 运行</p><p><code>docker run -p 3306:3306 --name mysql \-v /usr/local/docker/mysql/conf:/etc/mysql \-v /usr/local/docker/mysql/logs:/var/log/mysql \-v /usr/local/docker/mysql/data:/var/lib/mysql \-e MYSQL_ROOT_PASSWORD=123456 \-d mysql:5.7.22</code></p><p>docker 构建springboot项目<br><code>FROM java:8ADD book.jar book.jarRUN bash -c &#39;touch /book.jar&#39;ENTRYPOINT [ &quot;java&quot;,&quot;-jar&quot;,&quot;/book.jar&quot;]</code></p><p><code>docker run    --net=host  --name=book  -d -p 8081:8081 book</code></p><p>docker 查看book的日志</p><p><code>docker logs book</code></p><p><code>docker logs -f book</code></p><p>安装docker compose</p><p><a href="https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$" target="_blank" rel="noopener">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$</a>(uname -s)-$(uname -m)” -o /usr/local/bin/docker-compose</p><p>chmod +x docker-compose</p><p>查看docker默认的数据卷<br>docker volume ls</p><p>mvn clean package -Dmaven.test.skip=true</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
      <category>Docker配置文件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC认证服务配置</title>
    <link href="undefined2018/10/02/JDBC%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <url>2018/10/02/JDBC%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC认证服务配置"><a href="#JDBC认证服务配置" class="headerlink" title="JDBC认证服务配置"></a>JDBC认证服务配置</h1><h2 id="自定义登录与授权"><a href="#自定义登录与授权" class="headerlink" title="自定义登录与授权"></a>自定义登录与授权</h2><pre><code class="java">package com.qy.hos.business.oauth.service;import com.google.common.collect.Lists;import com.qy.hos.provider.api.UserService;import com.qy.hos.provider.domain.TbUser;import org.apache.dubbo.config.annotation.Reference;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import java.util.List;/** * @author Qy * @title: UserDetailsServiceImpl */@Servicepublic class UserDetailsServiceImpl implements UserDetailsService {    @Reference(version = &quot;1.0.0&quot;)    private UserService userService;    @Override    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {        //给每一个用户授予USER权限        List&lt;GrantedAuthority&gt; grantedAuthorities = Lists.newArrayList();        SimpleGrantedAuthority grantedAuthority = new SimpleGrantedAuthority(&quot;USER&quot;);        grantedAuthorities.add(grantedAuthority);        TbUser user = userService.getUser(s);        //账号存在        if(user != null){            return new User(user.getUsername(),user.getPassword(),grantedAuthorities);        }else {            return null;        }    }////    private static final String USERNAME = &quot;admin&quot;;//    private static final String PASSWORD = &quot;$2a$10$WhCuqmyCsYdqtJvM0/J4seCU.xZQHe2snNE5VFUuBGUZWPbtdl3GG&quot;;//    @Override//    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException {////        //判断用户名是否匹配//        if (s.equals(USERNAME)) {//            List&lt;GrantedAuthority&gt; grantedAuthorities = Lists.newArrayList();//            GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(&quot;USER&quot;);//            grantedAuthorities.add(grantedAuthority);//            return new User(USERNAME, PASSWORD, grantedAuthorities);//        }else {//            return null;//        }//    }}</code></pre><h2 id="服务器安全配置"><a href="#服务器安全配置" class="headerlink" title="服务器安全配置"></a>服务器安全配置</h2><pre><code class="java">package com.qy.hos.business.oauth.configure;import com.qy.hos.business.oauth.service.UserDetailsServiceImpl;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;/** * @author Qy * @title: WebSecurityConfiguration */@Configuration@EnableWebSecurity@EnableResourceServer@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {    @Bean    public BCryptPasswordEncoder passwordEncoder() {        // 配置默认的加密方式        return new BCryptPasswordEncoder();    }    @Bean    @Override    protected UserDetailsService userDetailsService() {        return new UserDetailsServiceImpl();    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService());    }    @Override    public void configure(WebSecurity web) throws Exception {        web.ignoring().antMatchers(&quot;/login&quot;);        web.ignoring().antMatchers(&quot;/swagger-resources/**&quot;, &quot;/webjars/**&quot;, &quot;/v2/**&quot;, &quot;/swagger-ui.html/**&quot;);    }    /**     * 用于支持 password 模式     *     * @return     * @throws Exception     */    @Bean    @Override    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http.exceptionHandling()                .and()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);    }}</code></pre><h2 id="认证服务器配置"><a href="#认证服务器配置" class="headerlink" title="认证服务器配置"></a>认证服务器配置</h2><pre><code class="java">package com.qy.hos.business.oauth.configure;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.jdbc.DataSourceBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.ClientDetailsService;import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;import org.springframework.security.oauth2.provider.token.TokenStore;import org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;import javax.sql.DataSource;/** * @author Qy * @title: AuthorizationServerConfiguration */@Configuration@EnableAuthorizationServerpublic class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {    @Autowired    private BCryptPasswordEncoder passwordEncoder;    /**     * 注入用于支持 password 模式     */    @Autowired    private AuthenticationManager authenticationManager;    @Bean    @Primary    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)    public DataSource dataSource() {        // 配置数据源（注意，我使用的是 HikariCP 连接池），以上注解是指定数据源，否则会有冲突        return DataSourceBuilder.create().build();    }    @Bean    public TokenStore tokenStore() {        // 基于 JDBC 实现，令牌保存到数据库        return new JdbcTokenStore(dataSource());//        return new RedisTokenStore(redisConnectionFactory);    }    @Bean    public ClientDetailsService jdbcClientDetailsService() {        // 基于 JDBC 实现，需要事先在数据库配置客户端信息        return new JdbcClientDetailsService(dataSource());    }    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        endpoints                // 用于支持密码模式                .authenticationManager(authenticationManager)                .tokenStore(tokenStore());    }    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {        security                // 允许客户端访问 /oauth/check_token 检查 token                .checkTokenAccess(&quot;isAuthenticated()&quot;)                .allowFormAuthenticationForClients();    }    /**     * 配置客户端     *     * @param clients     * @throws Exception     */    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        // 客户端配置        clients.withClientDetails(jdbcClientDetailsService());    }}</code></pre><h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><p>懒得整理 有一些表是多余的</p><pre><code class="sql">-- ---------------------------------------------------------- 主机:                           127.0.0.1-- 服务器版本:                        10.3.9-MariaDB - mariadb.org binary distribution-- 服务器操作系统:                      Win64-- HeidiSQL 版本:                  9.4.0.5125-- --------------------------------------------------------/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET NAMES utf8 */;/*!50503 SET NAMES utf8mb4 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;-- 导出 night 的数据库结构CREATE DATABASE IF NOT EXISTS `night` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `night`;-- 导出  表 night.admin_log 结构CREATE TABLE IF NOT EXISTS `admin_log` (  `id` int(10) NOT NULL AUTO_INCREMENT,  `admin_id` varchar(50) DEFAULT NULL,  `ip` varchar(50) DEFAULT NULL,  `address` varchar(50) DEFAULT NULL,  `user_agent` varchar(50) DEFAULT NULL,  `create_time` timestamp NULL DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8;-- 正在导出表  night.admin_log 的数据：~66 rows (大约)/*!40000 ALTER TABLE `admin_log` DISABLE KEYS */;REPLACE INTO `admin_log` (`id`, `admin_id`, `ip`, `address`, `user_agent`, `create_time`) VALUES    (13, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 17:10:16&#39;),    (14, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 17:25:43&#39;),    (15, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 19:07:34&#39;),    (16, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 17:09:53&#39;),    (17, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 17:13:43&#39;),    (18, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 19:20:58&#39;),    (19, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-24 19:21:13&#39;),    (20, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-24 19:21:23&#39;),    (21, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-24 19:21:51&#39;),    (22, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-24 19:21:57&#39;),    (23, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-24 19:22:21&#39;),    (24, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-24 19:47:24&#39;),    (25, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-24 19:48:05&#39;),    (26, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 08:53:36&#39;),    (27, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:23:06&#39;),    (28, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:24:29&#39;),    (29, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:25:37&#39;),    (30, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:26:37&#39;),    (31, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:31:41&#39;),    (32, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:33:47&#39;),    (33, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:34:42&#39;),    (34, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:36:13&#39;),    (35, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:41:38&#39;),    (36, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:41:40&#39;),    (37, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:41:48&#39;),    (38, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:42:49&#39;),    (39, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:42:55&#39;),    (40, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:43:14&#39;),    (41, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:45:23&#39;),    (42, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:46:45&#39;),    (43, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:46:57&#39;),    (44, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:53:49&#39;),    (45, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:53:52&#39;),    (46, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:54:22&#39;),    (47, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:56:07&#39;),    (48, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:58:00&#39;),    (49, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:59:07&#39;),    (50, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 09:59:09&#39;),    (51, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Chrome&#39;, &#39;2019-10-25 09:59:26&#39;),    (52, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 10:29:15&#39;),    (53, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 10:36:40&#39;),    (54, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 10:48:14&#39;),    (55, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 11:10:17&#39;),    (56, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 14:13:24&#39;),    (57, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 14:29:18&#39;),    (58, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-25 14:42:15&#39;),    (59, &#39;1&#39;, &#39;127.0.0.1&#39;, NULL, &#39;Unknown&#39;, &#39;2019-10-28 14:36:44&#39;),    (60, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:51&#39;),    (61, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:51&#39;),    (62, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:52&#39;),    (63, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 09:21:15&#39;),    (64, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 13:49:50&#39;),    (65, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:43&#39;),    (66, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:47&#39;),    (67, &#39;1&#39;, &#39;127.0.0.1&#39;, NULL, &#39;Unknown&#39;, &#39;2019-10-28 14:36:53&#39;),    (68, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:41:26&#39;),    (69, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:45&#39;),    (70, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:46&#39;),    (71, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:47&#39;),    (72, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:50&#39;),    (73, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:47&#39;),    (74, &#39;1&#39;, &#39;127.0.0.1&#39;, NULL, &#39;Unknown&#39;, &#39;2019-10-28 14:36:48&#39;),    (75, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:48&#39;),    (76, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-28 14:36:52&#39;),    (77, &#39;1&#39;, &#39;127.0.0.1&#39;, &#39;内网IP&#39;, &#39;Unknown&#39;, &#39;2019-10-29 11:01:32&#39;),    (78, &#39;dengliang&#39;, &#39;10.1.53.89&#39;, &#39;dldlld&#39;, &#39;dldldl&#39;, &#39;2019-10-29 13:46:40&#39;);/*!40000 ALTER TABLE `admin_log` ENABLE KEYS */;-- 导出  表 night.clientdetails 结构CREATE TABLE IF NOT EXISTS `clientdetails` (  `appId` varchar(128) NOT NULL,  `resourceIds` varchar(256) DEFAULT NULL,  `appSecret` varchar(256) DEFAULT NULL,  `scope` varchar(256) DEFAULT NULL,  `grantTypes` varchar(256) DEFAULT NULL,  `redirectUrl` varchar(256) DEFAULT NULL,  `authorities` varchar(256) DEFAULT NULL,  `access_token_validity` int(11) DEFAULT NULL,  `refresh_token_validity` int(11) DEFAULT NULL,  `additionalInformation` varchar(4096) DEFAULT NULL,  `autoApproveScopes` varchar(256) DEFAULT NULL,  PRIMARY KEY (`appId`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.clientdetails 的数据：~0 rows (大约)/*!40000 ALTER TABLE `clientdetails` DISABLE KEYS */;/*!40000 ALTER TABLE `clientdetails` ENABLE KEYS */;-- 导出  表 night.menu 结构CREATE TABLE IF NOT EXISTS `menu` (  `id` varchar(50) NOT NULL COMMENT &#39;菜单id&#39;,  `price` varchar(50) DEFAULT NULL COMMENT &#39;价格&#39;,  `total` varchar(50) DEFAULT NULL COMMENT &#39;总数&#39;,  `name` varchar(50) DEFAULT NULL COMMENT &#39;菜单名字&#39;,  `parent_id` varchar(50) DEFAULT NULL COMMENT &#39;父级菜单id&#39;,  `url` varchar(50) DEFAULT NULL COMMENT &#39;菜单url&#39;,  `icon` varchar(50) DEFAULT NULL COMMENT &#39;菜单图标&#39;,  `order` int(11) DEFAULT NULL COMMENT &#39;菜单顺序&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.menu 的数据：~4 rows (大约)/*!40000 ALTER TABLE `menu` DISABLE KEYS */;REPLACE INTO `menu` (`id`, `price`, `total`, `name`, `parent_id`, `url`, `icon`, `order`) VALUES    (&#39;8c9557c7183e4d9295a208beded245f7&#39;, NULL, NULL, &#39;skzy&#39;, &#39;c9964055f8b94124ba0b714a48bcc98b&#39;, NULL, &#39;sbkzy.png&#39;, 1),    (&#39;c9964055f8b94124ba0b714a48bcc98b&#39;, NULL, NULL, &#39;qiuyang&#39;, &#39;0&#39;, NULL, &#39;qy.png&#39;, 2);/*!40000 ALTER TABLE `menu` ENABLE KEYS */;-- 导出  表 night.oauth_access_token 结构CREATE TABLE IF NOT EXISTS `oauth_access_token` (  `token_id` varchar(256) DEFAULT NULL,  `token` blob DEFAULT NULL,  `authentication_id` varchar(128) NOT NULL,  `user_name` varchar(256) DEFAULT NULL,  `client_id` varchar(256) DEFAULT NULL,  `authentication` blob DEFAULT NULL,  `refresh_token` varchar(256) DEFAULT NULL,  PRIMARY KEY (`authentication_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.oauth_access_token 的数据：~1 rows (大约)/*!40000 ALTER TABLE `oauth_access_token` DISABLE KEYS */;REPLACE INTO `oauth_access_token` (`token_id`, `token`, `authentication_id`, `user_name`, `client_id`, `authentication`, `refresh_token`) VALUES    (&#39;0131b9ee3ed3e4ceb4a968efdb90aa97&#39;, _binary 0xedc3f4c61f1000b1932e6a3756f1&#39;, &#39;admin&#39;, &#39;client&#39;, _binary 0xfa5259bf6520c3789dddce4aba06b0b7&#39;, _binary 0xb3214b0490f63a567bfc9bc718af2a&#39;, &#39;admin&#39;, &#39;client&#39;, _binary 0xc483a862b79325f0f77a0a6c84e99ec2&#39;);/*!40000 ALTER TABLE `oauth_access_token` ENABLE KEYS */;-- 导出  表 night.oauth_approvals 结构CREATE TABLE IF NOT EXISTS `oauth_approvals` (  `userId` varchar(256) DEFAULT NULL,  `clientId` varchar(256) DEFAULT NULL,  `scope` varchar(256) DEFAULT NULL,  `status` varchar(10) DEFAULT NULL,  `expiresAt` timestamp NULL DEFAULT NULL,  `lastModifiedAt` timestamp NULL DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.oauth_approvals 的数据：~0 rows (大约)/*!40000 ALTER TABLE `oauth_approvals` DISABLE KEYS */;/*!40000 ALTER TABLE `oauth_approvals` ENABLE KEYS */;-- 导出  表 night.oauth_client_details 结构CREATE TABLE IF NOT EXISTS `oauth_client_details` (  `client_id` varchar(128) NOT NULL,  `resource_ids` varchar(256) DEFAULT NULL,  `client_secret` varchar(256) DEFAULT NULL,  `scope` varchar(256) DEFAULT NULL,  `authorized_grant_types` varchar(256) DEFAULT NULL,  `web_server_redirect_uri` varchar(256) DEFAULT NULL,  `authorities` varchar(256) DEFAULT NULL,  `access_token_validity` int(11) DEFAULT NULL,  `refresh_token_validity` int(11) DEFAULT NULL,  `additional_information` varchar(4096) DEFAULT NULL,  `autoapprove` varchar(256) DEFAULT NULL,  PRIMARY KEY (`client_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.oauth_client_details 的数据：~1 rows (大约)/*!40000 ALTER TABLE `oauth_client_details` DISABLE KEYS */;REPLACE INTO `oauth_client_details` (`client_id`, `resource_ids`, `client_secret`, `scope`, `authorized_grant_types`, `web_server_redirect_uri`, `authorities`, `access_token_validity`, `refresh_token_validity`, `additional_information`, `autoapprove`) VALUES    (&#39;client&#39;, &#39;backend-resources&#39;, &#39;$2a$10$qdmHW9.s8biV8vqLJKu.Juh.Kxm8WPqHCAs7ja1XtG2AM.EDKKBge&#39;, &#39;backend&#39;, &#39;password,refresh_token&#39;, &#39;&#39;, NULL, 864000, 864000, NULL, NULL);/*!40000 ALTER TABLE `oauth_client_details` ENABLE KEYS */;-- 导出  表 night.oauth_client_token 结构CREATE TABLE IF NOT EXISTS `oauth_client_token` (  `token_id` varchar(256) DEFAULT NULL,  `token` blob DEFAULT NULL,  `authentication_id` varchar(128) NOT NULL,  `user_name` varchar(256) DEFAULT NULL,  `client_id` varchar(256) DEFAULT NULL,  PRIMARY KEY (`authentication_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.oauth_client_token 的数据：~0 rows (大约)/*!40000 ALTER TABLE `oauth_client_token` DISABLE KEYS */;/*!40000 ALTER TABLE `oauth_client_token` ENABLE KEYS */;-- 导出  表 night.oauth_code 结构CREATE TABLE IF NOT EXISTS `oauth_code` (  `code` varchar(256) DEFAULT NULL,  `authentication` blob DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.oauth_code 的数据：~0 rows (大约)/*!40000 ALTER TABLE `oauth_code` DISABLE KEYS */;/*!40000 ALTER TABLE `oauth_code` ENABLE KEYS */;-- 导出  表 night.oauth_refresh_token 结构CREATE TABLE IF NOT EXISTS `oauth_refresh_token` (  `token_id` varchar(256) DEFAULT NULL,  `token` blob DEFAULT NULL,  `authentication` blob DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- 正在导出表  night.oauth_refresh_token 的数据：~0 rows (大约)/*!40000 ALTER TABLE `oauth_refresh_token` DISABLE KEYS */;REPLACE INTO `oauth_refresh_token` (`token_id`, `token`, `authentication`) VALUES    (&#39;c483a862b79325f0f77a0a6c84e99ec2&#39;, _binary 0xACED00057372004C6F72672E737072696E676672616D65776F726B2E73656375726974792E6F61757468322E636F6D6D6F6E2E44656661756C744578706972696E674F417574683252656672657368546F6B656E2FDF47639DD0C9B70200014C000A65787069726174696F6E7400104C6A6176612F7574696C2F446174653B787200446F72672E737072696E676672616D65776F726B2E73656375726974792E6F61757468322E636F6D6D6F6E2E44656661756C744F417574683252656672657368546F6B656E733F0A6354D45E0200014C000576616C75657400124C6A6176612F6C616E672F537472696E673B787074002431633138383361652D633335322D343138382D613936312D3833366430333664303962337372000E6A6176612E7574696C2E44617465686A3F4B597419030000787077080000016E91E67F6A78, _binary 0x`oauth_refresh_token` ENABLE KEYS */;-- 导出  表 night.tb_permission 结构CREATE TABLE IF NOT EXISTS `tb_permission` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `parent_id` bigint(20) DEFAULT NULL COMMENT &#39;父权限&#39;,  `name` varchar(64) NOT NULL COMMENT &#39;权限名称&#39;,  `enname` varchar(64) NOT NULL COMMENT &#39;权限英文名称&#39;,  `url` varchar(255) NOT NULL COMMENT &#39;授权路径&#39;,  `description` varchar(200) DEFAULT NULL COMMENT &#39;备注&#39;,  `created` datetime NOT NULL,  `updated` datetime NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COMMENT=&#39;权限表&#39;;-- 正在导出表  night.tb_permission 的数据：~4 rows (大约)/*!40000 ALTER TABLE `tb_permission` DISABLE KEYS */;REPLACE INTO `tb_permission` (`id`, `parent_id`, `name`, `enname`, `url`, `description`, `created`, `updated`) VALUES    (1, 0, &#39;系统管理&#39;, &#39;SYstem&#39;, &#39;/&#39;, NULL, &#39;2019-09-24 15:47:03&#39;, &#39;2019-09-24 15:47:03&#39;),    (2, 1, &#39;内容管理&#39;, &#39;SystemContent&#39;, &#39;/contents&#39;, NULL, &#39;2019-09-24 15:47:35&#39;, &#39;2019-09-24 15:47:35&#39;),    (3, 2, &#39;查看内容&#39;, &#39;SystemContentView&#39;, &#39;/contents/view&#39;, NULL, &#39;2019-09-24 15:48:15&#39;, &#39;2019-09-24 15:48:17&#39;),    (4, 2, &#39;保存内容&#39;, &#39;SystemContentSave&#39;, &#39;/contents/save&#39;, NULL, &#39;2019-09-24 15:48:58&#39;, &#39;2019-09-24 15:49:00&#39;);/*!40000 ALTER TABLE `tb_permission` ENABLE KEYS */;-- 导出  表 night.tb_role 结构CREATE TABLE IF NOT EXISTS `tb_role` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `parent_id` bigint(20) DEFAULT NULL COMMENT &#39;父角色&#39;,  `name` varchar(64) NOT NULL COMMENT &#39;角色名称&#39;,  `enname` varchar(64) NOT NULL COMMENT &#39;角色英文名称&#39;,  `description` varchar(200) DEFAULT NULL COMMENT &#39;备注&#39;,  `created` datetime NOT NULL,  `updated` datetime NOT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COMMENT=&#39;角色表&#39;;-- 正在导出表  night.tb_role 的数据：~0 rows (大约)/*!40000 ALTER TABLE `tb_role` DISABLE KEYS */;REPLACE INTO `tb_role` (`id`, `parent_id`, `name`, `enname`, `description`, `created`, `updated`) VALUES    (1, 0, &#39;超级管理员&#39;, &#39;admin&#39;, NULL, &#39;2019-09-24 15:45:41&#39;, &#39;2019-09-24 15:45:42&#39;);/*!40000 ALTER TABLE `tb_role` ENABLE KEYS */;-- 导出  表 night.tb_role_permission 结构CREATE TABLE IF NOT EXISTS `tb_role_permission` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `role_id` bigint(20) NOT NULL COMMENT &#39;角色 ID&#39;,  `permission_id` bigint(20) NOT NULL COMMENT &#39;权限 ID&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COMMENT=&#39;角色权限表&#39;;-- 正在导出表  night.tb_role_permission 的数据：~4 rows (大约)/*!40000 ALTER TABLE `tb_role_permission` DISABLE KEYS */;REPLACE INTO `tb_role_permission` (`id`, `role_id`, `permission_id`) VALUES    (1, 1, 1),    (2, 1, 2),    (3, 1, 3),    (4, 1, 4);/*!40000 ALTER TABLE `tb_role_permission` ENABLE KEYS */;-- 导出  表 night.tb_user 结构CREATE TABLE IF NOT EXISTS `tb_user` (  `id` varchar(50) NOT NULL,  `username` varchar(50) NOT NULL COMMENT &#39;用户名&#39;,  `password` varchar(64) NOT NULL COMMENT &#39;密码，加密存储&#39;,  `phone` varchar(20) DEFAULT NULL COMMENT &#39;注册手机号&#39;,  `email` varchar(50) DEFAULT NULL COMMENT &#39;注册邮箱&#39;,  `created` datetime NOT NULL COMMENT &#39;注册时间&#39;,  `updated` datetime NOT NULL COMMENT &#39;更新时间&#39;,  `icon` longtext DEFAULT NULL COMMENT &#39;头像&#39;,  `wxopenid` varchar(50) DEFAULT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `username` (`username`) USING BTREE,  UNIQUE KEY `phone` (`phone`) USING BTREE,  UNIQUE KEY `email` (`email`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#39;用户表&#39;;-- 正在导出表  night.tb_user 的数据：~1 rows (大约)/*!40000 ALTER TABLE `tb_user` DISABLE KEYS */;REPLACE INTO `tb_user` (`id`, `username`, `password`, `phone`, `email`, `created`, `updated`, `icon`, `wxopenid`) VALUES    (&#39;2fa3cf0c1e0643c1b9ca678c883a20eb&#39;, &#39;admin&#39;, &#39;$2a$10$NNgbu7kuBngEACGk2XdD0umqllx9ECn1CNfX4m.Tq6lvGisz7Jjd6&#39;, NULL, NULL, &#39;2019-11-11 13:08:24&#39;, &#39;2019-11-11 13:08:24&#39;, &#39;http://hostest.oss-cn-beijing.aliyuncs.com/2a5a0a36-1947-4955-8368-51bb95580632.png&#39;, NULL);/*!40000 ALTER TABLE `tb_user` ENABLE KEYS */;-- 导出  表 night.tb_user_role 结构CREATE TABLE IF NOT EXISTS `tb_user_role` (  `id` bigint(20) NOT NULL AUTO_INCREMENT,  `user_id` bigint(20) NOT NULL COMMENT &#39;用户 ID&#39;,  `role_id` bigint(20) NOT NULL COMMENT &#39;角色 ID&#39;,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COMMENT=&#39;用户角色表&#39;;-- 正在导出表  night.tb_user_role 的数据：~0 rows (大约)/*!40000 ALTER TABLE `tb_user_role` DISABLE KEYS */;REPLACE INTO `tb_user_role` (`id`, `user_id`, `role_id`) VALUES    (1, 1, 1);/*!40000 ALTER TABLE `tb_user_role` ENABLE KEYS */;/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, &#39;&#39;) */;/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</code></pre><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p><img src="https://i.loli.net/2019/11/12/zxCLZQ7mH6IKp8d.png" srcset="/img/loading.gif" alt=""></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://i.loli.net/2019/11/12/B9DWnXi3FZrQ1bw.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus 配合MyBatisCodeHelperPro</title>
    <link href="undefined2018/07/30/MyBatis/"/>
    <url>2018/07/30/MyBatis/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Plus-配合MyBatisCodeHelperPro"><a href="#MyBatis-Plus-配合MyBatisCodeHelperPro" class="headerlink" title="MyBatis-Plus 配合MyBatisCodeHelperPro"></a>MyBatis-Plus 配合MyBatisCodeHelperPro</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.2.0.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.qy&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;mybatis-plus&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;            &lt;version&gt;3.0.1&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.zaxxer&lt;/groupId&gt;            &lt;artifactId&gt;HikariCP&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;            &lt;exclusions&gt;                &lt;!-- 排除 tomcat-jdbc 以使用 HikariCP --&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;                    &lt;artifactId&gt;tomcat-jdbc&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><pre><code>spring:  application:    name: mybatis  main:    allow-bean-definition-overriding: true  datasource:    type: com.zaxxer.hikari.HikariDataSource    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/dl?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8    username: root    password: 123456    hikari:      minimum-idle: 5      idle-timeout: 600000      maximum-pool-size: 10      auto-commit: true      pool-name: MyHikariCP      max-lifetime: 1800000      connection-timeout: 30000      connection-test-query: SELECT 1mybatis-plus:  # xml  mapper-locations: classpath:mapper/*Mapper.xml  # 实体扫描，多个package用逗号或者分号分隔  type-aliases-package: com.qy.mybatisplus.domain  configuration:    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><h2 id="MyBatisCodeHelperPro-自动生成"><a href="#MyBatisCodeHelperPro-自动生成" class="headerlink" title="MyBatisCodeHelperPro 自动生成"></a>MyBatisCodeHelperPro 自动生成</h2><p>###<img src="https://i.loli.net/2019/11/04/wNnu8M3ViogCHQe.png" srcset="/img/loading.gif" alt=""></p><h2 id="生成后的目录结构"><a href="#生成后的目录结构" class="headerlink" title="生成后的目录结构"></a>生成后的目录结构</h2><p><img src="https://i.loli.net/2019/11/04/YgG3eFZr7wmDo9l.png" srcset="/img/loading.gif" alt=""></p><h2 id="配置主程序Application"><a href="#配置主程序Application" class="headerlink" title="配置主程序Application"></a>配置主程序Application</h2><pre><code>package com.qy.mybatisplus;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.transaction.annotation.EnableTransactionManagement;@SpringBootApplication@EnableTransactionManagement@MapperScan(&quot;com.qy.mybatisplus.mapper&quot;)public class MybatisPlusApplication {    public static void main(String[] args) {        SpringApplication.run(MybatisPlusApplication.class, args);    }}</code></pre><h3 id="Mapper测试"><a href="#Mapper测试" class="headerlink" title="Mapper测试"></a>Mapper测试</h3><pre><code>package com.qy.mybatisplus;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.qy.mybatisplus.domain.Student;import com.qy.mybatisplus.mapper.StudentMapper;import jdk.nashorn.internal.runtime.regexp.joni.Warnings;import org.junit.jupiter.api.Test;import org.springframework.boot.test.context.SpringBootTest;import javax.annotation.Resource;import java.util.List;@SpringBootTestclass MybatisPlusApplicationTests {    @Test    void contextLoads() {    }    @Resource    private StudentMapper studentMapper;    @Test    public void Insert(){        Student student = new Student();        student.setAge(10);        student.setId(1111);        studentMapper.insert(student);    }    @Test    public void Update(){        Student student = new Student();        student.setId(1);        student.setName(&quot;改后名&quot;);        studentMapper.updateById(student);    }    @Test    public void Select(){        Student student = studentMapper.selectById(1);    }    /**     * 条件查询     */    @Test    public void SelectWrapper(){        QueryWrapper&lt;Student&gt; objectQueryWrapper = new QueryWrapper&lt;&gt;();        objectQueryWrapper                .isNull(&quot;name&quot;);        List&lt;Student&gt; students = studentMapper.selectList(objectQueryWrapper);        students.stream().forEach(Student::getName);    }    @Test    public void DeleteWrapper(){        QueryWrapper&lt;Student&gt; objectQueryWrapper = new QueryWrapper&lt;&gt;();        objectQueryWrapper                .like(&quot;id&quot;,&quot;11&quot;);        int delete = studentMapper.delete(objectQueryWrapper);    }    @Test    public void testUpdate(){        studentMapper.update(null, Wrappers.&lt;Student&gt;lambdaUpdate().set(Student::getName,&quot;sbdl&quot;).eq(Student::getId,1));    }}</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>并发</title>
    <link href="undefined2018/07/03/%E5%B9%B6%E5%8F%91/"/>
    <url>2018/07/03/%E5%B9%B6%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="应对高并发"><a href="#应对高并发" class="headerlink" title="应对高并发"></a>应对高并发</h1><h2 id="什么是高并发"><a href="#什么是高并发" class="headerlink" title="什么是高并发"></a>什么是高并发</h2><p>高并发(High Concurrency)是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。高并发相关常用的一些指标有 <strong>响应时间(Response Time)</strong>，<strong>吞吐量(Throughput)</strong>，<strong>每秒查询率 QPS(Query Per Second)</strong>，<strong>并发用户数</strong> 等。</p><ul><li><strong>响应时间：</strong> 系统对请求做出响应的时间。例如系统处理一个 HTTP 请求需要 200ms，这个 200ms 就是系统的响应时间。</li><li><strong>吞吐量：</strong> 单位时间(年，月，日，时，分，秒)内处理的请求数量。</li><li><strong>QPS：</strong> 每秒响应请求数。在互联网领域，这个指标和吞吐量区分的没有这么明显。</li><li><strong>并发用户数：</strong> 同时承载正常使用系统功能的用户数量。例如一个即时通讯系统，同时在线量一定程度上代表了系统的并发用户数。</li></ul><h2 id="如何提升系统的并发能力"><a href="#如何提升系统的并发能力" class="headerlink" title="如何提升系统的并发能力"></a>如何提升系统的并发能力</h2><p>互联网分布式架构设计，提高系统并发能力的方式，方法论上主要有两种：<strong>垂直扩展(Scale Up)</strong> 与 <strong>水平扩展(Scale Out)</strong>。</p><h3 id="垂直扩展"><a href="#垂直扩展" class="headerlink" title="垂直扩展"></a>垂直扩展</h3><p>提升单机处理能力。垂直扩展的方式又有两种：</p><ul><li>增强单机硬件性能，例如：增加 CPU 核数如 32 核，升级更好的网卡如万兆，升级更好的硬盘如 SSD，扩充硬盘容量如 2T，扩充系统内存如 128G；</li><li>提升单机架构性能，例如：使用 Cache 来减少 IO 次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间；</li></ul><p>在互联网业务发展非常迅猛的早期，如果预算不是问题，强烈建议使用 “增强单机硬件性能” 的方式提升系统并发能力，因为这个阶段，公司的战略往往是发展业务抢时间，而 “增强单机硬件性能” 往往是最快的方法。</p><p>不管是提升单机硬件性能，还是提升单机架构性能，都有一个致命的不足：单机性能总是有极限的。所以互联网分布式架构设计高并发终极解决方案还是水平扩展。</p><h3 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a>水平扩展</h3><p>只要增加服务器数量，就能线性扩充系统性能。水平扩展对系统架构设计是有要求的，如何在架构各层进行可水平扩展的设计，以及互联网公司架构各层常见的水平扩展实践，是本文重点讨论的内容。</p><h2 id="典型互联网分层架构"><a href="#典型互联网分层架构" class="headerlink" title="典型互联网分层架构"></a>典型互联网分层架构</h2><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/c4ca4238a0b9238.png" srcset="/img/loading.gif" alt="img"></p><ul><li><strong>客户端层：</strong> 典型调用方是浏览器或手机应用 APP</li><li><strong>反向代理层：</strong> 系统入口(Ingress)，反向代理(Nginx)</li><li><strong>站点应用层：</strong> 实现核心应用逻辑，返回 HTML 或者 JSON</li><li><strong>服务层：</strong> 微服务体现在这一层</li><li><strong>数据缓存层：</strong> 缓存加速访问存储</li><li><strong>数据库层：</strong> 数据库持久化数据存储</li></ul><h2 id="水平扩展分层架构"><a href="#水平扩展分层架构" class="headerlink" title="水平扩展分层架构"></a>水平扩展分层架构</h2><h3 id="反向代理层的水平扩展"><a href="#反向代理层的水平扩展" class="headerlink" title="反向代理层的水平扩展"></a>反向代理层的水平扩展</h3><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/c81e728d9d4c2f6.png" srcset="/img/loading.gif" alt="img"></p><p>反向代理层的水平扩展，是通过 <strong>DNS 轮询</strong> 实现的：DNS Server 对于一个域名配置了多个解析 IP，每次 DNS 解析请求来访问 DNS Server，会轮询返回这些 IP。</p><p>当 Nginx 成为瓶颈的时候，只要增加服务器数量，新增 Nginx 服务的部署，增加一个外网 IP，就能扩展反向代理层的性能，做到理论上的无限高并发。</p><h3 id="站点应用层的水平扩展"><a href="#站点应用层的水平扩展" class="headerlink" title="站点应用层的水平扩展"></a>站点应用层的水平扩展</h3><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/eccbc87e4b5ce2f.png" srcset="/img/loading.gif" alt="img"></p><p>站点层的水平扩展，是通过 <strong>Nginx</strong> 实现的。通过修改 <code>nginx.conf</code>，可以设置多个 Web 后端。</p><p>当 Web 后端成为瓶颈的时候，只要增加服务器数量，新增 Web 服务的部署，在 Nginx 配置中配置上新的 Web 后端，就能扩展站点层的性能，做到理论上的无限高并发。</p><h3 id="服务层的水平扩展"><a href="#服务层的水平扩展" class="headerlink" title="服务层的水平扩展"></a>服务层的水平扩展</h3><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/a87ff679a2f3e71.png" srcset="/img/loading.gif" alt="img"></p><p>服务层的水平扩展，是通过 <strong>服务连接池</strong> 实现的。</p><p>站点层通过 RPC Client 调用下游的服务层 RPC Server 时，RPC Client 中的连接池会建立与下游服务多个连接，当服务成为瓶颈的时候，只要增加服务器数量，新增服务部署，在 RPC Client 处建立新的下游服务连接，就能扩展服务层性能，做到理论上的无限高并发。如果需要优雅的进行服务层自动扩容，这里可能需要配置中心里服务自动发现功能的支持。</p><h3 id="数据层的水平扩展"><a href="#数据层的水平扩展" class="headerlink" title="数据层的水平扩展"></a>数据层的水平扩展</h3><p>在数据量很大的情况下，数据层(缓存，数据库)涉及数据的水平扩展，将原本存储在一台服务器上的数据(缓存，数据库)水平拆分到不同服务器上去，以达到扩充系统性能的目的。</p><h4 id="按照范围水平拆分"><a href="#按照范围水平拆分" class="headerlink" title="按照范围水平拆分"></a>按照范围水平拆分</h4><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/e4da3b7fbbce234.png" srcset="/img/loading.gif" alt="img"></p><p>每一个数据服务，存储一定范围的数据</p><ul><li>user0 库，存储 uid 范围 1-1kw</li><li>user1 库，存储 uid 范围 1kw-2kw</li></ul><p><strong>优点：</strong></p><ul><li>规则简单，Service 只需判断一下 uid 范围就能路由到对应的存储服务</li><li>数据均衡性较好</li><li>比较容易扩展，可以随时加一个 uid [2kw,3kw] 的数据服务</li></ul><p><strong>缺点：</strong></p><ul><li>请求的负载不一定均衡，一般来说，新注册的用户会比老用户更活跃，大范围的服务请求压力会更大</li></ul><h4 id="按照哈希水平拆分"><a href="#按照哈希水平拆分" class="headerlink" title="按照哈希水平拆分"></a>按照哈希水平拆分</h4><p><img src="http://www.qfdmy.com/wp-content/uploads/2019/08/1679091c5a880fa.png" srcset="/img/loading.gif" alt="img"></p><p>每一个数据库，存储某个 key 值 hash 后的部分数据</p><ul><li>user0 库，存储偶数 uid 数据</li><li>user1 库，存储奇数 uid 数据</li></ul><p><strong>优点：</strong></p><ul><li>规则简单，Service 只需对 uid 进行 hash 能路由到对应的存储服务</li><li>数据均衡性较好</li><li>请求均匀性较好</li></ul><p><strong>缺点：</strong></p><ul><li>不容易扩展，扩展一个数据服务，hash 方法改变时候，可能需要进行数据迁移</li></ul><h4 id="水平拆分与主从同步"><a href="#水平拆分与主从同步" class="headerlink" title="水平拆分与主从同步"></a>水平拆分与主从同步</h4><p>这里需要注意的是，通过水平拆分来扩充系统性能，与主从同步读写分离来扩充数据库性能的方式有本质的不同。</p><p><strong>通过水平拆分扩展数据库性能</strong></p><ul><li>每个服务器上存储的数据量是总量的 1/n，所以单机的性能也会有提升</li><li>n 个服务器上的数据没有交集，那个服务器上数据的并集是数据的全集</li><li>数据水平拆分到了 n 个服务器上，理论上读性能扩充了 n 倍，写性能也扩充了 n 倍(其实远不止 n 倍，因为单机的数据量变为了原来的 1/n)</li></ul><p><strong>通过主从同步读写分离扩展数据库性能</strong></p><ul><li>每个服务器上存储的数据量是和总量相同</li><li>n 个服务器上的数据都一样，都是全集</li><li>理论上读性能扩充了 n 倍，写仍然是单点，写性能不变</li></ul><blockquote><p><strong>注意：</strong> 缓存层的水平拆分和数据库层的水平拆分类似，也是以范围拆分和哈希拆分的方式居多</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>高并发(High Concurrency)是互联网分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计保证系统能够同时并行处理很多请求。</p><p>提高系统并发能力的方式，方法论上主要有两种：垂直扩展(Scale Up)与水平扩展(Scale Out)。前者垂直扩展可以通过提升单机硬件性能，或者提升单机架构性能，来提高并发性，但单机性能总是有极限的，<strong>互联网分布式架构设计高并发终极解决方案还是后者：水平扩展</strong>。</p><p>互联网分层架构中，各层次水平扩展的实践又有所不同：</p><ul><li>反向代理层可以通过 <strong>DNS 轮询</strong> 的方式来进行水平扩展</li><li>站点层可以通过 Nginx 来进行水平扩展</li><li>服务层可以通过服务连接池来进行水平扩展</li><li>数据库可以按照数据范围，或者数据哈希的方式来进行水平扩展</li></ul><p>各层实施水平扩展后，能够通过增加服务器数量的方式来提升系统的性能，做到理论上的性能无限。</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Reids存储令牌</title>
    <link href="undefined2018/03/10/%E5%9F%BA%E4%BA%8Eredis%E5%AD%98%E5%82%A8%E4%BB%A4%E7%89%8C/"/>
    <url>2018/03/10/%E5%9F%BA%E4%BA%8Eredis%E5%AD%98%E5%82%A8%E4%BB%A4%E7%89%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Reids存储令牌"><a href="#基于Reids存储令牌" class="headerlink" title="基于Reids存储令牌"></a>基于Reids存储令牌</h1><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><p>使用docker-compose安装运行</p><pre><code>version: &#39;3&#39;services:  redis:    image: redis:latest    container_name: redis    restart: always    command: --appendonly yes    ports:      - 6379:6379    volumes:      - ./redis_data:/data</code></pre><h2 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h2><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;   &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;   &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><pre><code>spring:  redis:    # 你 Redis 主机地址    host: localhost    # 你 Redis 主机端口    port: 6379    # 集群配置，上生产后使用#   cluster:#     nodes: ${base.config.redis.hostname}:${base.config.redis.port}    # 我们使用 Lettuce 客户端，比 Jedis 更高效    lettuce:      # 连接池配置      pool:        # 连接池中的最小空闲连接，默认 0        min-idle: 0        # 连接池中的最大空闲连接，默认 8        max-idle: 8        # 连接池最大阻塞等待时间（使用负值表示没有限制），默认 -1ms        max-wait: -1ms        # 连接池最大连接数（使用负值表示没有限制），默认 8        max-active: 8     # Redis 高可用集群，由于 K8S 帮我们实现了高可用，这个可以忽略了#    sentinel:#      master: mymaster#      nodes: ${base.config.redis.hostname}:26379</code></pre><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><pre><code>package com.qy.hos.business.oauth.configure;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.jdbc.DataSourceBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.ClientDetailsService;import org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;import org.springframework.security.oauth2.provider.token.TokenStore;import org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;import javax.sql.DataSource;/** * @author Qy * @title: AuthorizationServerConfiguration */@Configuration@EnableAuthorizationServerpublic class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {    @Autowired    private BCryptPasswordEncoder passwordEncoder;    /**     * 注入用于支持 password 模式     */    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private RedisConnectionFactory redisConnectionFactory;    @Bean    @Primary    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)    public DataSource dataSource() {        // 配置数据源（注意，我使用的是 HikariCP 连接池），以上注解是指定数据源，否则会有冲突        return DataSourceBuilder.create().build();    }    @Bean    public TokenStore tokenStore() {        // 基于 JDBC 实现，令牌保存到数据库//        return new JdbcTokenStore(dataSource());        return new RedisTokenStore(redisConnectionFactory);    }    @Bean    public ClientDetailsService jdbcClientDetailsService() {        // 基于 JDBC 实现，需要事先在数据库配置客户端信息        return new JdbcClientDetailsService(dataSource());    }    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {        endpoints                // 用于支持密码模式                .authenticationManager(authenticationManager)                .tokenStore(tokenStore());    }    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {        security                // 允许客户端访问 /oauth/check_token 检查 token                .checkTokenAccess(&quot;isAuthenticated()&quot;)                .allowFormAuthenticationForClients();    }    /**     * 配置客户端     *     * @param clients     * @throws Exception     */    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        // 客户端配置        clients.withClientDetails(jdbcClientDetailsService());    }}</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>进行登录操作后</p><p><img src="https://hostest.oss-cn-beijing.aliyuncs.com/20191203100203.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>